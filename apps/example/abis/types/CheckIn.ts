/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CheckInInterface extends utils.Interface {
  functions: {
    "MAX_QUERY_LIMIT()": FunctionFragment;
    "PERIOD_DURATION()": FunctionFragment;
    "checkIn(address)": FunctionFragment;
    "computePeriod(uint256)": FunctionFragment;
    "getCurrentStreak(address)": FunctionFragment;
    "getHistory(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getLastUpdatedPeriod(address)": FunctionFragment;
    "getStreakAtPeriod(address,uint256)": FunctionFragment;
    "initialize(address,uint256,uint256)": FunctionFragment;
    "isCheckedInToday(address)": FunctionFragment;
    "isMissedCheckIn(address)": FunctionFragment;
    "limitDailyCheckIn()": FunctionFragment;
    "owner()": FunctionFragment;
    "periodEndAt()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setLimitDailyCheckIn(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_QUERY_LIMIT"
      | "PERIOD_DURATION"
      | "checkIn"
      | "computePeriod"
      | "getCurrentStreak"
      | "getHistory"
      | "getLastUpdatedPeriod"
      | "getStreakAtPeriod"
      | "initialize"
      | "isCheckedInToday"
      | "isMissedCheckIn"
      | "limitDailyCheckIn"
      | "owner"
      | "periodEndAt"
      | "renounceOwnership"
      | "setLimitDailyCheckIn"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_QUERY_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERIOD_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "checkIn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "computePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStreak",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistory",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUpdatedPeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStreakAtPeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCheckedInToday",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMissedCheckIn",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "limitDailyCheckIn",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodEndAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitDailyCheckIn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_QUERY_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERIOD_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHistory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastUpdatedPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStreakAtPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCheckedInToday",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMissedCheckIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitDailyCheckIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodEndAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitDailyCheckIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CheckedIn(address,uint256,uint256)": EventFragment;
    "EndOfPeriodTsUpdated(uint256)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "LimitDailyCheckInUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CheckedIn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndOfPeriodTsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LimitDailyCheckInUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface CheckedInEventObject {
  user: string;
  period: BigNumber;
  count: BigNumber;
}
export type CheckedInEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CheckedInEventObject
>;

export type CheckedInEventFilter = TypedEventFilter<CheckedInEvent>;

export interface EndOfPeriodTsUpdatedEventObject {
  endOfPeriod: BigNumber;
}
export type EndOfPeriodTsUpdatedEvent = TypedEvent<
  [BigNumber],
  EndOfPeriodTsUpdatedEventObject
>;

export type EndOfPeriodTsUpdatedEventFilter =
  TypedEventFilter<EndOfPeriodTsUpdatedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LimitDailyCheckInUpdatedEventObject {
  limitDailyCheckIn: BigNumber;
}
export type LimitDailyCheckInUpdatedEvent = TypedEvent<
  [BigNumber],
  LimitDailyCheckInUpdatedEventObject
>;

export type LimitDailyCheckInUpdatedEventFilter =
  TypedEventFilter<LimitDailyCheckInUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CheckIn extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CheckInInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_QUERY_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkIn(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    computePeriod(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentStreak(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getHistory(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      limit: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        numPeriod: BigNumber;
        periods: BigNumber[];
        streakCounts: BigNumber[];
      }
    >;

    getLastUpdatedPeriod(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStreakAtPeriod(
      user: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      owner: string,
      _limitDailyCheckIn: BigNumberish,
      _periodEndAt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isCheckedInToday(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMissedCheckIn(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    limitDailyCheckIn(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periodEndAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLimitDailyCheckIn(
      _limitDailyCheckIn: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  MAX_QUERY_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  checkIn(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  computePeriod(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentStreak(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getHistory(
    user: string,
    from: BigNumberish,
    to: BigNumberish,
    limit: BigNumberish,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[], BigNumber[]] & {
      numPeriod: BigNumber;
      periods: BigNumber[];
      streakCounts: BigNumber[];
    }
  >;

  getLastUpdatedPeriod(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStreakAtPeriod(
    user: string,
    period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    owner: string,
    _limitDailyCheckIn: BigNumberish,
    _periodEndAt: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isCheckedInToday(user: string, overrides?: CallOverrides): Promise<boolean>;

  isMissedCheckIn(user: string, overrides?: CallOverrides): Promise<boolean>;

  limitDailyCheckIn(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  periodEndAt(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLimitDailyCheckIn(
    _limitDailyCheckIn: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_QUERY_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    checkIn(to: string, overrides?: CallOverrides): Promise<void>;

    computePeriod(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentStreak(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHistory(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      limit: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        numPeriod: BigNumber;
        periods: BigNumber[];
        streakCounts: BigNumber[];
      }
    >;

    getLastUpdatedPeriod(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStreakAtPeriod(
      user: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      owner: string,
      _limitDailyCheckIn: BigNumberish,
      _periodEndAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isCheckedInToday(user: string, overrides?: CallOverrides): Promise<boolean>;

    isMissedCheckIn(user: string, overrides?: CallOverrides): Promise<boolean>;

    limitDailyCheckIn(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    periodEndAt(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLimitDailyCheckIn(
      _limitDailyCheckIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CheckedIn(address,uint256,uint256)"(
      user?: string | null,
      period?: null,
      count?: null
    ): CheckedInEventFilter;
    CheckedIn(
      user?: string | null,
      period?: null,
      count?: null
    ): CheckedInEventFilter;

    "EndOfPeriodTsUpdated(uint256)"(
      endOfPeriod?: null
    ): EndOfPeriodTsUpdatedEventFilter;
    EndOfPeriodTsUpdated(endOfPeriod?: null): EndOfPeriodTsUpdatedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LimitDailyCheckInUpdated(uint256)"(
      limitDailyCheckIn?: null
    ): LimitDailyCheckInUpdatedEventFilter;
    LimitDailyCheckInUpdated(
      limitDailyCheckIn?: null
    ): LimitDailyCheckInUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    MAX_QUERY_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    checkIn(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    computePeriod(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentStreak(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHistory(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      limit: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastUpdatedPeriod(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStreakAtPeriod(
      user: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      owner: string,
      _limitDailyCheckIn: BigNumberish,
      _periodEndAt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isCheckedInToday(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMissedCheckIn(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitDailyCheckIn(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periodEndAt(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLimitDailyCheckIn(
      _limitDailyCheckIn: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_QUERY_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkIn(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    computePeriod(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentStreak(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHistory(
      user: string,
      from: BigNumberish,
      to: BigNumberish,
      limit: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastUpdatedPeriod(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStreakAtPeriod(
      user: string,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      _limitDailyCheckIn: BigNumberish,
      _periodEndAt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isCheckedInToday(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMissedCheckIn(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limitDailyCheckIn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodEndAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLimitDailyCheckIn(
      _limitDailyCheckIn: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
